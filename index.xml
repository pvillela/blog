<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Paulo Villela</title>
    <link>https://pvillela.github.io/blog/</link>
    <description>Recent content on Paulo Villela</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Paulo Villela - All rights reserved</copyright>
    <lastBuildDate>Sat, 24 Apr 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://pvillela.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>The Essence of Blockchain Technology for IT Practitioners</title>
      <link>https://pvillela.github.io/blog/2021/blockchain-essence/</link>
      <pubDate>Sat, 24 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://pvillela.github.io/blog/2021/blockchain-essence/</guid>
      <description>The Essence of Blockchain Technology for IT Practitioners This brief article aims to describe the essence of Blockchain technology in terms of concepts that many IT professionals are familiar with.
A blockchain is essentially a replicated database that consists of the following capabilities. These capabilities are largely common to both public and permissioned blockchains:
 A ledger  The ledger is a database log that is irrefutable and tamper-proof. This means that, once a transaction is accepted and there is consensus that it is valid see below), it cannot be refuted (synonyms: denied, repudiated), deleted, or modified.</description>
    </item>
    
    <item>
      <title>Persistence Wrapper in Golang</title>
      <link>https://pvillela.github.io/blog/2021/persistence-wrapper-in-golang/</link>
      <pubDate>Sun, 04 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://pvillela.github.io/blog/2021/persistence-wrapper-in-golang/</guid>
      <description>Persistence Wrapper in Golang When working with databases, there is typically a need to deal with record context information, required for persistence, in addition to the domain model entities&#39; natural attributes. For example, some databases require a synthetic key field and some database operations may require an optimistic concurrency token field. This article discusses different approaches to address this need, focusing on Go but also including, for comparison, brief references to approaches used with JVM languages.</description>
    </item>
    
    <item>
      <title>Simple and Resilient Architecture for Signing of JWT Tokens</title>
      <link>https://pvillela.github.io/blog/2021/simple-architecture-for-signing-of-jwt-tokens/</link>
      <pubDate>Sun, 04 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://pvillela.github.io/blog/2021/simple-architecture-for-signing-of-jwt-tokens/</guid>
      <description>This article describes a simple and resilient architecture for the signing of JWT tokens, as well as discusses how the solution fares when certain components are compromised.
Elements These are the core concepts and components of the solution:
 Signature key &amp;ndash; a randomly generated string or byte array of appropriate length. Signature key validity periodicity &amp;ndash; a defined sequence of time periods during which a signature key is valid. Examples:  One hour starting at the top of the hour.</description>
    </item>
    
    <item>
      <title>Past Comments on Microservices: 2015-2017</title>
      <link>https://pvillela.github.io/blog/2021/past-comments-on-microservices-2015-2017/</link>
      <pubDate>Sun, 28 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://pvillela.github.io/blog/2021/past-comments-on-microservices-2015-2017/</guid>
      <description>&lt;h1 id=&#34;past-comments-on-microservices-2015-2017&#34;&gt;Past Comments on Microservices: 2015-2017&lt;/h1&gt;
&lt;p&gt;These are comments on microservices I made between 2015 and 2017.  Some of the content still holds, some of it I no longer agree with.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Function-Oriented Architecture (this is a work in progress)</title>
      <link>https://pvillela.github.io/blog/2021/function-oriented-architecture/</link>
      <pubDate>Sun, 14 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://pvillela.github.io/blog/2021/function-oriented-architecture/</guid>
      <description>Function-Oriented Architecture This report collects my thoughts on function-oriented architecture, a concept that has been shaped primarily by two very large and successful systems I architected over the past six years. This report is a work-in-progress that evolves as I write down my ideas and experiences on this topic, and as I continue to get feedback from other software architects and developers, especially those who worked with me on the aforementioned projects.</description>
    </item>
    
    <item>
      <title>Why Build Microservices with Kotlin, Kafka, and Kubernetes</title>
      <link>https://pvillela.github.io/blog/2021/why-build-microservices-with-kotlin-kafka-and-kubernetes/</link>
      <pubDate>Sun, 28 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://pvillela.github.io/blog/2021/why-build-microservices-with-kotlin-kafka-and-kubernetes/</guid>
      <description>&lt;h1 id=&#34;why-build-microservices-with-kotlin-kafka-and-kubernetes&#34;&gt;Why Build Microservices with Kotlin, Kafka, and Kubernetes&lt;/h1&gt;
&lt;p&gt;Why I chose Kotlin, Kafka, and Kubernetes for a mission-critical, high-throughput, low-latency application.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Containers, Kubernetes, and Service Mesh in a Nutshell</title>
      <link>https://pvillela.github.io/blog/2021/containers-kubernetes-and-service-mesh-in-a-nutshell/</link>
      <pubDate>Sat, 20 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://pvillela.github.io/blog/2021/containers-kubernetes-and-service-mesh-in-a-nutshell/</guid>
      <description>&lt;h1 id=&#34;containers-kubernetes-and-service-mesh-in-a-nutshell&#34;&gt;Containers, Kubernetes, and Service Mesh in a Nutshell&lt;/h1&gt;
&lt;p&gt;This is a very brief distillation of the concepts around containers, Kubernetes, and service mesh.  The reader is assumed to have passing familiarity with these three terms.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://pvillela.github.io/blog/page/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pvillela.github.io/blog/page/about/</guid>
      <description>Innovative and seasoned IT professional, passionate about software engineering effectiveness and architecture. Leads large-scale systems architecture, development, maintenance, planning, and review projects in Canada, USA, Latin America, Europe, and Asia across varied industries including banking, insurance, postal services, government, utilities, health care, pharmaceuticals, transportation, hospitality, manufacturing, and telecommunications. Builds high-performance teams. Delivers system solutions for rapid introduction of new business capabilities with lightweight, cloud-native, event-driven, and function-oriented software architectures. Rescues projects, rearchitecting for scalability, performance, reliability, and productivity.</description>
    </item>
    
    <item>
      <title>Contact</title>
      <link>https://pvillela.github.io/blog/page/contact/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pvillela.github.io/blog/page/contact/</guid>
      <description>Feel free to send me a message via LinkedIn at https://www.linkedin.com/in/pvillela/ and I will reply to you by email.</description>
    </item>
    
  </channel>
</rss>
